cmake_minimum_required (VERSION 3.1)
set (CMAKE_C_STANDARD 11)
set (CMAKE_CXX_STANDARD 11)

# Check platforms
if (CMAKE_HOST_WIN32)
    set(WINDOWS 1)
elseif(CMAKE_HOST_APPLE)
    set(MACOS 1)
elseif(CMAKE_HOST_UNIX)
    set(LINUX 1)
endif()

project (GameEngine)
include_directories("${PROJECT_SOURCE_DIR}/PhantomCore/src/common")
include_directories("${PROJECT_SOURCE_DIR}/PhantomCore/src/graphics")
include_directories("${PROJECT_SOURCE_DIR}/PhantomCore/src/interface")
include_directories("${PROJECT_SOURCE_DIR}/PhantomCore/src/maths")
include_directories("${PROJECT_SOURCE_DIR}/PhantomCore/src/utils")
include_directories("${PROJECT_SOURCE_DIR}/Dependencies/GLFW/include")
include_directories("${PROJECT_SOURCE_DIR}/Dependencies/GLEW/include")

#增加检查C编译器
if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libstdc++")
    message(STATUS "---------clang | libstdc++")
endif()

if(WINDOWS)
    link_directories("${PROJECT_SOURCE_DIR}/Dependencies/GLFW/lib-vc2015"
                     "${PROJECT_SOURCE_DIR}/Dependencies/GLEW/lib/Release/Win32")
elseif(MACOS)
	INCLUDE_DIRECTORIES ( /System/Library/Frameworks )
	FIND_LIBRARY(COCOA_LIBRARY Cocoa)
	# find_library(CoreFoundation_LIBRARY CoreFoundation)
	FIND_LIBRARY(IOKit_LIBRARY IOKit)
	FIND_LIBRARY(COREVIDEO_LIB NAMES CoreVideo)
    FIND_LIBRARY(OpenGL_LIBRARY OpenGL )

    MARK_AS_ADVANCED (COCOA_LIBRARY
    				IOKit_LIBRARY
    				COREVIDEO_LIB
                    OpenGL_LIBRARY)
    SET(EXTRA_LIBS ${COCOA_LIBRARY} ${IOKit_LIBRARY} ${COREVIDEO_LIB} ${OpenGL_LIBRARY})

    link_directories("${PROJECT_SOURCE_DIR}/Dependencies/GLFW/lib-mac")
    link_directories("${PROJECT_SOURCE_DIR}/Dependencies/GLEW/lib/Release/mac")
    
    # MESSAGE( STATUS "message openGL include = ${OPENGL_INCLUDE_DIR}.")
endif(WINDOWS)

add_subdirectory(PhantomCore)
add_subdirectory(Platform)
add_subdirectory(sample)